//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------

// An implementation of "NVIDIA FXAA 3.11" by TIMOTHY LOTTES
//
// http://timothylottes.blogspot.com/
//
// The shader is tuned for the defaul quality and good performance.
// See shaders\common\postFx\fxaa\fxaaP.hlsl to tweak the internal
// quality and performance settings.


singleton GFXStateBlockData( SMAA_Edge_StateBlock : PFX_DefaultStateBlock )
{   
  
   stencilDefined = true;
   stencilEnable = true;
   stencilPassOp = GFXStencilOpReplace;
   stencilFunc = GFXCmpAlways;
   stencilRef = 1;

   samplersDefined = true;   
   samplerStates[0] = SamplerClampLinear;
};


singleton ShaderData( SMAA_Edge_Shader )
{   
   DXVertexShaderFile 	= "./SMAA_Edge_V.hlsl";
   DXPixelShaderFile 	= "./SMAA_Edge_P.hlsl";
   
   OGLVertexShaderFile  = "./SMAA_Edge_V.glsl";
   OGLPixelShaderFile   = "./SMAA_Edge_P.glsl";
   
   samplerNames[0] = "$sceneTex";
  
   pixVersion = 4.0;
   
};


singleton GFXStateBlockData( SMAA_Blend_StateBlock : PFX_DefaultStateBlock )
{   
  
   stencilDefined = true;
   stencilEnable = true;
   stencilPassOp = GFXStencilOpKeep;
   stencilFunc = GFXCmpEqual;
   stencilRef = 1;

   samplersDefined = true;   
   samplerStates[0] = SamplerClampPoint;
   samplerStates[1] = SamplerClampLinear;
   samplerStates[2] = SamplerClampPoint;
   
};

singleton ShaderData( SMAA_Blend_Shader )
{   
   DXVertexShaderFile 	= "./SMAA_BlendWeight_V.hlsl";
   DXPixelShaderFile 	= "./SMAA_BlendWeight_P.hlsl";
   
   OGLVertexShaderFile  = "./SMAA_Edge_V.glsl";
   OGLPixelShaderFile   = "./SMAA_Edge_P.glsl";
   
   samplerNames[0] = "$edgesTex";
   samplerNames[1] = "$areaTex";
   samplerNames[2] = "$searchTex"; 

   pixVersion = 4.0;
};


singleton GFXStateBlockData( SMAA_NHBlending_StateBlock : PFX_DefaultStateBlock )
{   
  
   stencilDefined = true;
   stencilEnable = true;
   stencilPassOp = GFXStencilOpKeep;
   stencilFunc = GFXCmpEqual;
   stencilRef = 1;

   samplersDefined = true;   
   samplerStates[0] = SamplerClampPoint;
   samplerStates[1] = SamplerClampLinear;
   samplerStates[2] = SamplerClampPoint;
};

singleton ShaderData( SMAA_NHBlending_Shader )
{   
   DXVertexShaderFile 	= "./SMAA_NeighborHBlending_V.hlsl";
   DXPixelShaderFile 	= "./SMAA_NeighborHBlending_P.hlsl";
   
   OGLVertexShaderFile  = "./SMAA_Edge_V.glsl";
   OGLPixelShaderFile   = "./SMAA_Edge_P.glsl";
   
   samplerNames[0] = "$sceneTex";
   samplerNames[1] = "$blendTex";
  
   pixVersion = 4.0;
   
};

singleton PostEffect( SMAAPostFX )
{
   enabled = false;
   
   allowReflectPass = false;
   renderTime = "PFXAfterDiffuse";

   texture[0] = "$backBuffer"; 

   target = "$outTex";
   targetClear = PFXTargetClear_OnDraw;
   targetClearColor = "0 0 0 0";

   stateBlock = SMAA_Edge_StateBlock;
   shader = SMAA_Edge_Shader;
   
   singleton PostEffect()
   {
      internalName = "BlendPass";
	  
	  target = "$outTex";
	  targetClear = PFXTargetClear_OnDraw;
      
      shader = SMAA_Blend_Shader;
      stateBlock = SMAA_Blend_StateBlock;
      
      texture[0] = "$inTex";
	  textureAsset[1] = "AA_AreaTex";
      textureAsset[2] = "AA_SearchTex";     
   };
   
   singleton PostEffect()
   {
      internalName = "NHPass";
      
      shader = SMAA_NHBlending_Shader;
      stateBlock = SMAA_NHBlending_StateBlock;
      
      texture[0] = "$inTex";
      target = "$backBuffer"; 
   };
   
};



